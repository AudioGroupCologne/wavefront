use std::f32::consts::PI;

use bevy::prelude::*;

use crate::{grid::Grid, constants::{SIMULATION_WIDTH, SIMULATION_HEIGHT}};

#[derive(Resource)]
pub struct GradientResource(pub colorgrad::Gradient);

impl GradientResource {
    pub fn with_custom() -> Self {
        Self(
            colorgrad::CustomGradient::new()
                .colors(&[
                    colorgrad::Color::from_rgba8(250, 172, 168, 255),
                    colorgrad::Color::from_rgba8(0, 0, 0, 255),
                    colorgrad::Color::from_rgba8(221, 214, 243, 255),
                ])
                .domain(&[-2.0, 2.0])
                .build()
                .unwrap(),
        )
    }
}

#[derive(Component)]
pub struct Drag;

#[derive(Debug, Default, Component)]
/// A sound source on the grid
pub struct Source {
    /// index of the cell in the grid
    pub index: usize,
    /// phase shift of the function (currently in seconds)
    pub phase: f32,
    /// frequency of the function (in Hz)
    pub frequency: f32,
    /// amplitude of the function (currently unitless)
    pub amplitude: f32,
    /// type of the source
    pub r#type: SourceType,
}

#[derive(Debug, Default)]
pub enum SourceType {
    #[default]
    Sin,
    Gauss,
}

impl Source {
    pub fn new(
        index: usize,
        amplitude: f32,
        phase: f32,
        frequency: f32,
        r#type: SourceType,
    ) -> Self {
        Self {
            index,
            phase,
            frequency,
            amplitude,
            r#type,
        }
    }

    /// generated by chat gpt, not sure if it's correct
    pub fn periodic_gaussian(x: f32, period: f32, amplitude: f32, mean: f32, variance: f32) -> f32 {
        // Ensure x is within the periodic domain [0, period)
        let x = (x % period + period) % period;

        // Calculate the Gaussian function value
        let exp_term = (-0.5 * ((x - mean) / variance).powi(2)).exp();
        let scaling_factor = 1.0 / (variance * (2.0 * PI).sqrt());

        amplitude * scaling_factor * exp_term
    }

    pub fn spawn_initial_sources(mut commands: Commands) {
        commands.spawn(Source::new(
            Grid::coords_to_index(SIMULATION_WIDTH / 2, SIMULATION_HEIGHT / 2, 0),
            10.,
            0.0,
            1.0,
            SourceType::Sin,
        ));
        commands.spawn(Source::new(
            Grid::coords_to_index(SIMULATION_WIDTH / 4, SIMULATION_HEIGHT / 4, 0),
            10.,
            1.0,
            1.0,
            SourceType::Sin,
        ));
    }
}

#[derive(Debug, Component)]
/// A wall component containing the index of the corresponding cell in the grid
pub struct Wall(pub usize);
